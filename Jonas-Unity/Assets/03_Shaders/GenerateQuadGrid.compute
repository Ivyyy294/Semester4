// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CreateVertices
#pragma kernel CreateTriangles
#pragma kernel WaveAnimation

#define PI 3.14159265358979323846

RWStructuredBuffer <float3> Vertices;
RWStructuredBuffer <int> Triangles;

float QuadSize;
int Columns;
int Rows;

//Wave
int WaveTyp;
float WaveAnimationTimer;
float WaveHeight;
float WaveSpeed;
float WavesDirection;
float WavesFrequency;

[numthreads(8, 1 ,8)]
void CreateVertices (uint3 id : SV_DispatchThreadID)
{
	if (id.x > Rows || id.z > Columns)
		return;

	int index = id.x + (id.z * (Columns + 1));
	Vertices[index] = float3 (id.z * QuadSize, 0, id.x * QuadSize);
}

[numthreads (8, 1, 8)]
void CreateTriangles (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Rows || id.z >= Columns)
		return;

	int currentVertice = (id.x * Columns * 6) + (id.z * 6);

	int vBase = id.z + (id.x * (Columns + 1));
	int columnOffset = Columns + 1;

	Triangles[currentVertice++] = vBase;
	Triangles[currentVertice++] = vBase + 1;
	Triangles[currentVertice++] = vBase + columnOffset;

	Triangles[currentVertice++] = vBase + 1;
	Triangles[currentVertice++] = vBase + columnOffset + 1;
	Triangles[currentVertice++] = vBase + columnOffset;
}

//Wave
float WaveSinCos (float x, float z)
{
	const float Deg2Rad = PI / 180.f;

	float zSpeed = sin (WavesDirection * Deg2Rad) * WaveSpeed;
	float xSpeed = cos (WavesDirection * Deg2Rad) * WaveSpeed;

	float baseHeight = sin (z * WavesFrequency + WaveAnimationTimer * zSpeed) + cos (x * WavesFrequency + WaveAnimationTimer * xSpeed);

	return baseHeight * WaveHeight;
}

float WaveSin (float x, float z)
{
	const float Deg2Rad = PI / 180.f;
	
	float zSpeed = sin (WavesDirection * Deg2Rad);
	float xSpeed = cos (WavesDirection * Deg2Rad);

	float baseHeight = sin ((z * zSpeed + x * xSpeed) * WavesFrequency + WaveAnimationTimer * WaveSpeed);

	return baseHeight * WaveHeight;
}

float WaveSumSin (float x, float z)
{
	const float Deg2Rad = PI / 180.f;

	float zSpeed = sin (WavesDirection * Deg2Rad);
	float xSpeed = cos (WavesDirection * Deg2Rad);

	float h = 0.f;

	for (int i = 0; i < 4; ++i)
	{
		float w = WavesFrequency - (WavesFrequency * 0.25f * i);
		float a = WaveHeight - (WaveHeight * 0.25f * i);
		h += sin ((z * zSpeed + x * xSpeed) * w + WaveAnimationTimer * WaveSpeed) * a;
	}

	return h;
}

float WaveExperimental (float x, float z)
{
	const float Deg2Rad = PI / 180.f;

	float zSpeed = sin (WavesDirection * Deg2Rad);
	float xSpeed = cos (WavesDirection * Deg2Rad);

	float h = 0.f;

	for (int i = 0; i < 4; ++i)
	{
		float w = WavesFrequency - (WavesFrequency * 0.25f * i);
		float a = WaveHeight - (WaveHeight * 0.25f * i);
		h += sin ((z * zSpeed + x * xSpeed) * w + WaveAnimationTimer * WaveSpeed) * a;
	}

	float w = WavesFrequency / 10;
	float a = WaveHeight;
	h += cos ((x * xSpeed) * w + WaveAnimationTimer * WaveSpeed) * a;

	return h;
}

[numthreads (8, 1, 8)]
void WaveAnimation (uint3 id : SV_DispatchThreadID)
{
	if (id.x > Rows || id.z > Columns)
		return;

	int index = id.x + (id.z * (Columns + 1));

	if (WaveTyp == 0)
		Vertices[index].y = WaveSinCos (id.x, id.z);
	else if (WaveTyp == 1)
		Vertices[index].y = WaveSin (id.x, id.z);
	else if (WaveTyp == 2)
		Vertices[index].y = WaveSumSin (id.x, id.z);
	else
		Vertices[index].y = WaveExperimental (id.x, id.z);
}