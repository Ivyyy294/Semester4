// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CreateVertices
#pragma kernel CreateTriangles
#pragma kernel WaveAnimation

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWStructuredBuffer <float3> Vertices;
RWStructuredBuffer <int> Triangles;

float QuadSize;
int Columns;

//Wave
float WaveAnimationTimer;
float WaveHeight;

[numthreads(1, 1 ,1)]
void CreateVertices (uint3 id : SV_DispatchThreadID)
{
	int index = id.x + (id.z * (Columns + 1));
	Vertices[index] = float3 (id.z * QuadSize, 0, id.x * QuadSize);
}

[numthreads (1, 1, 1)]
void CreateTriangles (uint3 id : SV_DispatchThreadID)
{
	int currentVertice = (id.x * Columns * 6) + (id.z * 6);

	int vBase = id.x + (id.z * (Columns + 1));
	int columnOffset = Columns + 1;

	Triangles[currentVertice++] = vBase;
	Triangles[currentVertice++] = vBase + 1;
	Triangles[currentVertice++] = vBase + columnOffset;

	Triangles[currentVertice++] = vBase + 1;
	Triangles[currentVertice++] = vBase + columnOffset + 1;
	Triangles[currentVertice++] = vBase + columnOffset;
}

[numthreads (1, 1, 1)]
void WaveAnimation (uint3 id : SV_DispatchThreadID)
{
	int index = id.x + (id.z * (Columns + 1));
	float baseHeight = sin (id.z + WaveAnimationTimer) + cos (id.x + WaveAnimationTimer);
	Vertices[index].y = baseHeight * WaveHeight;
}